<<<<<<< HEAD
{"version":3,"file":"index.esm.js","sources":["../node_modules/d3-dsv/src/dsv.js","../node_modules/d3-dsv/src/csv.js","../src/components/Table.js"],"sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","import '../styles/table.css';\r\nimport '../styles/stacking.css'\r\nimport { csvParse } from 'd3-dsv';\r\n\r\nexport const LoadCSV = async (csvFilePath) => {\r\n  const response = await fetch(csvFilePath);\r\n  const csvText = await response.text();\r\n  const parsedData = csvParse(csvText);\r\n  return parsedData; \r\n};\r\n\r\nexport const CreateTable = (data) => {\r\n  const headers = Object.keys(data[0]);\r\n  const table = document.createElement('table');\r\n  table.classList.add('responsive-table');\r\n\r\n  const thead = document.createElement('thead');\r\n  const headerRow = document.createElement('tr');\r\n  headers.forEach((header) => {\r\n    const th = document.createElement('th');\r\n    th.textContent = header;\r\n    headerRow.appendChild(th);\r\n  });\r\n  thead.appendChild(headerRow);\r\n  table.appendChild(thead);\r\n\r\n  const tbody = document.createElement('tbody');\r\n  data.forEach((row) => {\r\n    const tr = document.createElement('tr');\r\n    Object.values(row).forEach((cell) => {\r\n      const td = document.createElement('td');\r\n      td.textContent = cell;\r\n      tr.appendChild(td);\r\n    });\r\n    tbody.appendChild(tr);\r\n  });\r\n\r\n  table.appendChild(tbody);\r\n  return table;\r\n};\r\n\r\nexport const ApplyStacking = (table) => {\r\n  table.classList.add('stacking');\r\n  console.log(\"Added Stacking\");\r\n  \r\n};\r\n\r\nexport const RenderTable = (table) => {\r\n  document.getElementById('table-container').innerHTML = '';\r\n  document.getElementById('table-container').appendChild(table);\r\n};"],"names":["EOL","EOF","objectConverter","columns","Function","map","name","i","JSON","stringify","join","inferColumns","rows","columnSet","Object","create","forEach","row","column","push","pad","value","width","s","length","Array","formatDate","date","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","csvParse","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","formatValue","formatRow","Date","test","parse","convert","object","customConverter","format","concat","formatBody","formatRows","dsv","LoadCSV","_ref","_regeneratorRuntime","mark","_callee","csvFilePath","response","csvText","parsedData","wrap","_context","prev","next","fetch","sent","abrupt","stop","_x","apply","this","arguments","CreateTable","data","headers","keys","table","document","createElement","classList","add","thead","headerRow","header","th","textContent","appendChild","tbody","tr","values","cell","td","ApplyStacking","console","log","RenderTable","getElementById","innerHTML"],"mappings":"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","x_google_ignoreList":[0,1]}
=======
{"version":3,"file":"index.esm.js","sources":["../node_modules/d3-dsv/src/dsv.js","../node_modules/d3-dsv/src/csv.js","../src/components/Table.js"],"sourcesContent":["var EOL = {},\n    EOF = {},\n    QUOTE = 34,\n    NEWLINE = 10,\n    RETURN = 13;\n\nfunction objectConverter(columns) {\n  return new Function(\"d\", \"return {\" + columns.map(function(name, i) {\n    return JSON.stringify(name) + \": d[\" + i + \"] || \\\"\\\"\";\n  }).join(\",\") + \"}\");\n}\n\nfunction customConverter(columns, f) {\n  var object = objectConverter(columns);\n  return function(row, i) {\n    return f(object(row), i, columns);\n  };\n}\n\n// Compute unique columns in order of discovery.\nfunction inferColumns(rows) {\n  var columnSet = Object.create(null),\n      columns = [];\n\n  rows.forEach(function(row) {\n    for (var column in row) {\n      if (!(column in columnSet)) {\n        columns.push(columnSet[column] = column);\n      }\n    }\n  });\n\n  return columns;\n}\n\nfunction pad(value, width) {\n  var s = value + \"\", length = s.length;\n  return length < width ? new Array(width - length + 1).join(0) + s : s;\n}\n\nfunction formatYear(year) {\n  return year < 0 ? \"-\" + pad(-year, 6)\n    : year > 9999 ? \"+\" + pad(year, 6)\n    : pad(year, 4);\n}\n\nfunction formatDate(date) {\n  var hours = date.getUTCHours(),\n      minutes = date.getUTCMinutes(),\n      seconds = date.getUTCSeconds(),\n      milliseconds = date.getUTCMilliseconds();\n  return isNaN(date) ? \"Invalid Date\"\n      : formatYear(date.getUTCFullYear(), 4) + \"-\" + pad(date.getUTCMonth() + 1, 2) + \"-\" + pad(date.getUTCDate(), 2)\n      + (milliseconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \".\" + pad(milliseconds, 3) + \"Z\"\n      : seconds ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \":\" + pad(seconds, 2) + \"Z\"\n      : minutes || hours ? \"T\" + pad(hours, 2) + \":\" + pad(minutes, 2) + \"Z\"\n      : \"\");\n}\n\nexport default function(delimiter) {\n  var reFormat = new RegExp(\"[\\\"\" + delimiter + \"\\n\\r]\"),\n      DELIMITER = delimiter.charCodeAt(0);\n\n  function parse(text, f) {\n    var convert, columns, rows = parseRows(text, function(row, i) {\n      if (convert) return convert(row, i - 1);\n      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);\n    });\n    rows.columns = columns || [];\n    return rows;\n  }\n\n  function parseRows(text, f) {\n    var rows = [], // output rows\n        N = text.length,\n        I = 0, // current character index\n        n = 0, // current line number\n        t, // current token\n        eof = N <= 0, // current token followed by EOF?\n        eol = false; // current token followed by EOL?\n\n    // Strip the trailing newline.\n    if (text.charCodeAt(N - 1) === NEWLINE) --N;\n    if (text.charCodeAt(N - 1) === RETURN) --N;\n\n    function token() {\n      if (eof) return EOF;\n      if (eol) return eol = false, EOL;\n\n      // Unescape quotes.\n      var i, j = I, c;\n      if (text.charCodeAt(j) === QUOTE) {\n        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);\n        if ((i = I) >= N) eof = true;\n        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        return text.slice(j + 1, i - 1).replace(/\"\"/g, \"\\\"\");\n      }\n\n      // Find next delimiter or newline.\n      while (I < N) {\n        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;\n        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }\n        else if (c !== DELIMITER) continue;\n        return text.slice(j, i);\n      }\n\n      // Return last token before EOF.\n      return eof = true, text.slice(j, N);\n    }\n\n    while ((t = token()) !== EOF) {\n      var row = [];\n      while (t !== EOL && t !== EOF) row.push(t), t = token();\n      if (f && (row = f(row, n++)) == null) continue;\n      rows.push(row);\n    }\n\n    return rows;\n  }\n\n  function preformatBody(rows, columns) {\n    return rows.map(function(row) {\n      return columns.map(function(column) {\n        return formatValue(row[column]);\n      }).join(delimiter);\n    });\n  }\n\n  function format(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join(\"\\n\");\n  }\n\n  function formatBody(rows, columns) {\n    if (columns == null) columns = inferColumns(rows);\n    return preformatBody(rows, columns).join(\"\\n\");\n  }\n\n  function formatRows(rows) {\n    return rows.map(formatRow).join(\"\\n\");\n  }\n\n  function formatRow(row) {\n    return row.map(formatValue).join(delimiter);\n  }\n\n  function formatValue(value) {\n    return value == null ? \"\"\n        : value instanceof Date ? formatDate(value)\n        : reFormat.test(value += \"\") ? \"\\\"\" + value.replace(/\"/g, \"\\\"\\\"\") + \"\\\"\"\n        : value;\n  }\n\n  return {\n    parse: parse,\n    parseRows: parseRows,\n    format: format,\n    formatBody: formatBody,\n    formatRows: formatRows,\n    formatRow: formatRow,\n    formatValue: formatValue\n  };\n}\n","import dsv from \"./dsv.js\";\n\nvar csv = dsv(\",\");\n\nexport var csvParse = csv.parse;\nexport var csvParseRows = csv.parseRows;\nexport var csvFormat = csv.format;\nexport var csvFormatBody = csv.formatBody;\nexport var csvFormatRows = csv.formatRows;\nexport var csvFormatRow = csv.formatRow;\nexport var csvFormatValue = csv.formatValue;\n","import '../styles/table.css';\nimport '../styles/stacking.css'\nimport { csvParse } from 'd3-dsv';\n\nexport const LoadCSV = async (csvFilePath) => {\n  const response = await fetch(csvFilePath);\n  const csvText = await response.text();\n  const parsedData = csvParse(csvText);\n  return parsedData; \n};\n\nexport const CreateTable = (data) => {\n  const headers = Object.keys(data[0]);\n  const table = document.createElement('table');\n  table.classList.add('responsive-table');\n\n  const thead = document.createElement('thead');\n  const headerRow = document.createElement('tr');\n  headers.forEach((header) => {\n    const th = document.createElement('th');\n    th.textContent = header;\n    headerRow.appendChild(th);\n  });\n  thead.appendChild(headerRow);\n  table.appendChild(thead);\n\n  const tbody = document.createElement('tbody');\n  data.forEach((row) => {\n    const tr = document.createElement('tr');\n    Object.values(row).forEach((cell) => {\n      const td = document.createElement('td');\n      td.textContent = cell;\n      tr.appendChild(td);\n    });\n    tbody.appendChild(tr);\n  });\n\n  table.appendChild(tbody);\n  return table;\n};\n\nexport const ApplyStacking = (table) => {\n  table.classList.add('stacking');\n  console.log(\"Added Stacking\");\n  \n};\n\nexport const RenderTable = (table) => {\n  document.getElementById('table-container').appendChild(table);\n};"],"names":["EOL","EOF","objectConverter","columns","Function","map","name","i","JSON","stringify","join","inferColumns","rows","columnSet","Object","create","forEach","row","column","push","pad","value","width","s","length","Array","formatDate","date","year","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","isNaN","getUTCFullYear","getUTCMonth","getUTCDate","csvParse","delimiter","reFormat","RegExp","DELIMITER","charCodeAt","parseRows","text","f","t","N","I","n","eof","eol","token","c","j","slice","replace","preformatBody","formatValue","formatRow","Date","test","parse","convert","object","customConverter","format","concat","formatBody","formatRows","dsv","LoadCSV","_ref","_regeneratorRuntime","mark","_callee","csvFilePath","response","csvText","parsedData","wrap","_context","prev","next","fetch","sent","abrupt","stop","_x","apply","this","arguments","CreateTable","data","headers","keys","table","document","createElement","classList","add","thead","headerRow","header","th","textContent","appendChild","tbody","tr","values","cell","td","ApplyStacking","console","log","RenderTable","getElementById"],"mappings":"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","x_google_ignoreList":[0,1]}
>>>>>>> 46533e9e01a189df16ef5e14d655dc0fe4ba15d6
